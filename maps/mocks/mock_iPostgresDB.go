// Code generated by MockGen. DO NOT EDIT.
// Source: example.go

// Package mock_maps is a generated GoMock package.
package mock_maps

import (
	sql "database/sql"
	maps "goModDemo/maps"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiPostgresDB is a mock of iPostgresDB interface.
type MockiPostgresDB struct {
	ctrl     *gomock.Controller
	recorder *MockiPostgresDBMockRecorder
}

// MockiPostgresDBMockRecorder is the mock recorder for MockiPostgresDB.
type MockiPostgresDBMockRecorder struct {
	mock *MockiPostgresDB
}

// NewMockiPostgresDB creates a new mock instance.
func NewMockiPostgresDB(ctrl *gomock.Controller) *MockiPostgresDB {
	mock := &MockiPostgresDB{ctrl: ctrl}
	mock.recorder = &MockiPostgresDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiPostgresDB) EXPECT() *MockiPostgresDBMockRecorder {
	return m.recorder
}

// DelRecord mocks base method.
func (m *MockiPostgresDB) DelRecord() (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelRecord")
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelRecord indicates an expected call of DelRecord.
func (mr *MockiPostgresDBMockRecorder) DelRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelRecord", reflect.TypeOf((*MockiPostgresDB)(nil).DelRecord))
}

// GetRecord mocks base method.
func (m *MockiPostgresDB) GetRecord() ([]maps.Home, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord")
	ret0, _ := ret[0].([]maps.Home)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockiPostgresDBMockRecorder) GetRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockiPostgresDB)(nil).GetRecord))
}

// PostRecord mocks base method.
func (m *MockiPostgresDB) PostRecord(arg0 maps.Home) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRecord", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRecord indicates an expected call of PostRecord.
func (mr *MockiPostgresDBMockRecorder) PostRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRecord", reflect.TypeOf((*MockiPostgresDB)(nil).PostRecord), arg0)
}
